name: HRMS CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt

      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety Check
        run: |
          pip install safety
          safety check --output json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hrms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirement.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock coverage

      - name: Run unit tests with coverage
        run: |
          python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hrms_test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: |
            coverage.xml
            htmlcov/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hrms_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirement.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt
          pip install pytest pytest-asyncio requests

      - name: Start application for integration tests
        run: |
          python run_dual_services.py &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hrms_integration

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short

      - name: Generate test report
        run: |
          pip install pytest-html
          python -m pytest tests/integration/ --html=integration-report.html --self-contained-html

      - name: Upload integration test reports
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: integration-report.html

  # Regression Tests
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hrms_regression
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirement.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement.txt
          pip install pytest pytest-html selenium

      - name: Download Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
          apt-get update
          apt-get install -y google-chrome-stable

      - name: Start application for regression tests
        run: |
          python run_dual_services.py &
          sleep 30
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hrms_regression

      - name: Run regression tests
        run: |
          python -m pytest tests/regression/ -v --tb=short --html=regression-report.html --self-contained-html
        env:
          CHROME_BIN: /usr/bin/google-chrome-stable

      - name: Upload regression test reports
        uses: actions/upload-artifact@v3
        with:
          name: regression-test-reports
          path: regression-report.html

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, regression-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: harrington40/hrms-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Test Environment
  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test')
    environment: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Test Environment
        run: |
          echo "Deploying to test environment..."
          # Add your test environment deployment commands here
          # Example: kubectl apply -f k8s/test/ or docker-compose up -d in test env
          echo "Test deployment completed"

      - name: Run smoke tests on test environment
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          curl -f ${{ secrets.TEST_URL }}/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          echo "Test environment deployment completed with status: ${{ job.status }}"

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging Environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging environment deployment commands here
          echo "Staging deployment completed"

      - name: Run integration tests on staging
        run: |
          echo "Running integration tests on staging..."
          # Add staging integration test commands here
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1

      - name: Performance testing
        run: |
          echo "Running performance tests..."
          # Add performance test commands here

      - name: Notify deployment status
        if: always()
        run: |
          echo "Staging environment deployment completed with status: ${{ job.status }}"

  # Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          echo "Deploying to production environment..."
          # Add your production environment deployment commands here
          echo "Production deployment completed"

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

      - name: Run production regression tests
        run: |
          echo "Running production regression tests..."
          # Add production regression test commands here

      - name: Notify deployment status
        if: always()
        run: |
          echo "Production environment deployment completed with status: ${{ job.status }}"

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Initiating rollback procedure..."
          # Add rollback commands here
          echo "Rollback completed"

      - name: Notify rollback
        run: |
          echo "Rollback completed due to deployment failure"